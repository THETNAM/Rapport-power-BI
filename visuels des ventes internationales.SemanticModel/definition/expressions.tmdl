expression 'Sample File' =
		let
		    Source = Folder.Files("C:\Users\TABOULA\Desktop\DATA SCIENCE\datasets\Fichiers de travail\Data\InternationalSales"),
		    Navigation1 = Source{0}[Content]
		in
		    Navigation1
	lineageTag: 858c21b5-1295-4d8d-9768-e08deba6cc63
	queryGroup: 'Transform File from InternationalSales\Helper Queries'

	annotation PBI_ResultType = Binary

expression Parameter1 = #"Sample File" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: cab96362-09d0-49d5-a038-7512c6e90cf0
	queryGroup: 'Transform File from InternationalSales\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Transform Sample File' =
		let
		    Source = Csv.Document(Parameter1,[Delimiter=",", Columns=6, Encoding=1252, QuoteStyle=QuoteStyle.None]),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
	lineageTag: a90cf549-a984-4771-b642-a3424cc8aed5
	queryGroup: 'Transform File from InternationalSales'

	annotation PBI_ResultType = Table

expression 'Transform File' =
		let
		    Source = (Parameter1 as binary) => let
		    Source = Csv.Document(Parameter1,[Delimiter=",", Columns=6, Encoding=1252, QuoteStyle=QuoteStyle.None]),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
		in
		    Source
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File""}" ]
	lineageTag: 1196ed5c-f82d-4ba9-92a6-aa6807741130
	queryGroup: 'Transform File from InternationalSales\Helper Queries'

	annotation PBI_ResultType = Function

expression InternationalSales =
		let
		    Source = Folder.Files("C:\Users\TABOULA\Desktop\DATA SCIENCE\datasets\Fichiers de travail\Data\InternationalSales"),
		    #"Filtered Hidden Files1" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),
		    #"Invoke Custom Function1" = Table.AddColumn(#"Filtered Hidden Files1", "Transform File (2)", each #"Transform File (2)"([Content])),
		    #"Renamed Columns1" = Table.RenameColumns(#"Invoke Custom Function1", {"Name", "Source.Name"}),
		    #"Removed Other Columns1" = Table.SelectColumns(#"Renamed Columns1", {"Source.Name", "Transform File (2)"}),
		    #"Expanded Table Column1" = Table.ExpandTableColumn(#"Removed Other Columns1", "Transform File (2)", Table.ColumnNames(#"Transform File (2)"(#"Sample File (2)"))),
		    #"Changed Type" = Table.TransformColumnTypes(#"Expanded Table Column1",{{"Source.Name", type text}, {"Column1", type text}, {"Column2", type text}, {"Column3", type text}, {"Column4", type text}, {"Column5", type text}, {"Column6", type text}}),
		    #"Promoted Headers" = Table.PromoteHeaders(#"Changed Type", [PromoteAllScalars=true]),
		    #"Removed Columns" = Table.RemoveColumns(#"Promoted Headers",{"Australia.csv"})
		in
		    #"Removed Columns"
	lineageTag: 261b11e9-6512-4cbd-8cac-0a3e114b57c5

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Sample File (2)' =
		let
		    Source = Folder.Files("C:\Users\TABOULA\Desktop\DATA SCIENCE\datasets\Fichiers de travail\Data\InternationalSales"),
		    Navigation1 = Source{0}[Content]
		in
		    Navigation1
	lineageTag: 2d020904-47d9-4ad1-b958-6075090278bf
	queryGroup: 'Transform File from InternationalSales (2)\Helper Queries'

	annotation PBI_ResultType = Binary

expression Parameter2 = #"Sample File (2)" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File (2)", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: de19901d-446e-4dd0-960b-ab625be2c82a
	queryGroup: 'Transform File from InternationalSales (2)\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Transform Sample File (2)' =
		let
		    Source = Csv.Document(Parameter2,[Delimiter=",", Columns=6, Encoding=1252, QuoteStyle=QuoteStyle.None]),
		    #"Change Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}, {"Column2", type text}, {"Column3", type text}, {"Column4", type text}, {"Column5", type text}, {"Column6", type text}})
		in
		    #"Change Type"
	lineageTag: 090caf99-7e90-4ed3-88af-f5a53bd5e930
	queryGroup: 'Transform File from InternationalSales (2)'

	annotation PBI_ResultType = Table

expression 'Transform File (2)' =
		let
		    Source = (Parameter2 as binary) => let
		    Source = Csv.Document(Parameter2,[Delimiter=",", Columns=6, Encoding=1252, QuoteStyle=QuoteStyle.None]),
		    #"Change Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}, {"Column2", type text}, {"Column3", type text}, {"Column4", type text}, {"Column5", type text}, {"Column6", type text}})
		in
		    #"Change Type"
		in
		    Source
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File (2)""}" ]
	lineageTag: d39aece4-5e91-4520-92c4-2e2643b7b722
	queryGroup: 'Transform File from InternationalSales (2)\Helper Queries'

	annotation PBI_ResultType = Function

expression 'Errors in sales' =
		let
		Source = sales,
		  #"Detected Type Mismatches" = let
		    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),
		    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),
		    fieldNames = Record.FieldNames(recordTypeFields),
		    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),
		    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = "The type of the value does not match the type of the column.", Detail = v], fieldTypes{i}})
		in
		    Table.TransformColumns(Source, pairs),
		  #"Added Index" = Table.AddIndexColumn(#"Detected Type Mismatches", "Row Number" ,1),
		  #"Kept Errors" = Table.SelectRowsWithErrors(#"Added Index", {"ProductID", "Date", "Zip", "Units", "Revenue", "Country"}),
		  #"Reordered Columns" = Table.ReorderColumns(#"Kept Errors", {"Row Number", "ProductID", "Date", "Zip", "Units", "Revenue", "Country"})
		in
		    #"Reordered Columns"
	lineageTag: 280adab3-251f-4bf6-8013-f6564e7442e4
	queryGroup: 'Query Errors - 7/7/2025 6:36:18 AM'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

